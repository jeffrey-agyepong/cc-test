---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import Markdown from "../utility/markdown.astro";

interface Props {
  background_image: {
    image_path: string;
    alt_text: string;
  }
  heading: {
    heading_text: string;
    heading_gradient_color: string;
  };
  subheading: {
    markdown_content: string;
    color: string;
  };
  image: {
    image_path: string;
    alt_text: string;
  };
  buttons: [
    {
      _bookshop_name: string;
      text: string;
      icon: string;
      link: string;
      background_color?: string;
      hover_brightness: number;
      text_color: string;
    },
  ];
}

const block = Astro.props;
const buttons = import.meta.glob("/src/components/buttons/**/*.astro", {
  eager: true,
});
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/**/*.{jpeg,jpg,png,gif}",
  { eager: true }
);

// Extract image URLS from image metadeta
const getImageUrl= (path: string) => {
  const image = images[path];
  return image ? image.default.src : path;
};

const backgroundImageSrc = getImageUrl(block.background_image.image_path);
const imageSrc = getImageUrl(block.image.image_path);
const headingGradientColor = block.heading.heading_gradient_color;
---

<section class="hero-section" style={`background-image: url('${backgroundImageSrc}');`}>
  <div class="hero-container">
    <div class="content">
      <h1 class="heading">{block.heading.heading_text}</h1>
      <div class="subheading-text" style={`color: ${block.subheading.color};`}>
        <Markdown content={block.subheading.markdown_content} />
      </div>
      <div class="buttons">
        {
          block.buttons.map((button) => {
            const name = button._bookshop_name.split("/").reverse()[0];
            const filePath = `/src/components/buttons/${name}/${name}.astro`;
            const Component = (buttons[filePath] as any)?.default;
            return <Component {...button} />;
          })
        }
      </div>
    </div>
  </div>
  <!-- Background Image -->
  <picture class="cs-background">
    <source media="(max-width: 600px)" srcset=${backgroundImageSrc}>
    <source media="(min-width: 601px)" srcset=${backgroundImageSrc}>
    <img loading="lazy" decoding="async" src=${backgroundImageSrc} alt="field" width="1920" height="1200" aria-hidden="true">
  </picture>
  <style define:vars={{ headingGradientColor }}>
    .hero-section{
      padding: clamp(9.5rem,25.95vw,10.75em) 1rem;
    /* prevents the topper line from causing an overflow */
    overflow: hidden;
    position: relative;
    z-index: 1;
    }
    .hero-container {
      width: 100%;
      max-width: 80rem;
      margin: auto;
      display: flex;
      flex-wrap: wrap;
      justify-content: flex-start;
      align-items: center;
    }
    .cs-background {
    width: 100%;
    height: 100%;
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -2;
  }
   .cs-background:before {
    /* Overlay */
    content: "";
    width: 100%;
    height: 100%;
    background: #000;
    opacity: 0.48;
    position: absolute;
    display: block;
    top: 0;
    left: 0;
    z-index: 1;
    /* prevents the cursor from interacting with it */
    pointer-events: none;
  }
   .cs-background img {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    object-fit: cover;
  }

    .content h1 {
      font-size: 2.5rem;
      line-height: 1em;
      font-weight: 700;
      background: -webkit-linear-gradient(to left, #eee 50%, #333);
      background: linear-gradient(
        to left,
        var(--headingGradientColor) 50%,
        #000000
      );
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    .content {
      display: flex;
      flex-direction: column;
    }

    .subheading-text {
      margin-top: 1rem;
    }

    .buttons {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      max-width: fit-content;
      justify-content: center;
      margin-top: 1rem;
    }
    button {
      padding: 0.75rem 1.2rem;
      border-radius: 20px;
      font-size: 1.25em;
      cursor: pointer;
      transition: all ease-in-out 0.15s;
      align-items: center;
      justify-content: center;
    }
    .btn {
      background: #4384e6;
      color: #fff;
      border: none;
      display: flex;
      gap: 8px;
      padding: 1rem;
    }
    .btn svg {
      width: 1rem;
    }

    .btn:hover {
      background: #0066ff;
    }

    .btn-outline {
      border: 1px solid #0d6efd;
      background: transparent;
      color: #0d6efd;
      margin-left: 5px;
    }

    button i {
      font-size: 0.78em;
    }

    @media only screen and (min-width: 400px) {
      .buttons {
        flex-direction: row;
        margin-top: 2rem;
      }
      .content h1 {
        font-size: 3.8rem;
      }
    }
    @media only screen and (min-width: 960px) {
      .hero-container {
        flex-direction: row;
        padding-block: 48px;
      }
      .content {
        width: 50%;
      }

      .buttons {
        flex-direction: column;
      }
    }
    @media only screen and (min-width: 1280px) {
      .buttons {
        flex-direction: row;
      }
    }
/* 
    @keyframes animate {
      0%,
      100% {
        border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
      }
      50% {
        border-radius: 30% 60% 70% 40% / 50% 60% 30% 60%;
      }
    } */
  </style>
</section>
